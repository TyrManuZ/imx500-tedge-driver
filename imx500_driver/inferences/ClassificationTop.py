# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ClassificationTop(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClassificationTop()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClassificationTop(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClassificationTop
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClassificationTop
    def Perception(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from SmartCamera.ClassificationData import ClassificationData
            obj = ClassificationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ClassificationTopStart(builder):
    builder.StartObject(1)

def Start(builder):
    ClassificationTopStart(builder)

def ClassificationTopAddPerception(builder, perception):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(perception), 0)

def AddPerception(builder, perception):
    ClassificationTopAddPerception(builder, perception)

def ClassificationTopEnd(builder):
    return builder.EndObject()

def End(builder):
    return ClassificationTopEnd(builder)
